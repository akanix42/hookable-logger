{"version":3,"sources":["logger.js"],"names":["suppressAllOutput","logFunctions","logger","test","cb","result","forEach","logFunction","removeAllHooks","logException","err","error","stringifyError","filter","space","plainObject","key","generateOutputFunction","hooks","fn","callLogFunction","args","suppressMessage","some","hookFn","addHook","push","removeHook","splice","indexOf","length"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,oBAAoB,KAAxB;AACA,IAAMC,eAAe,CACnB,KADmB,EAEnB,OAFmB,EAGnB,MAHmB,EAInB,MAJmB,CAArB;AAMA,IAAMC,SAAS;AACPC,MADO;AAAA,2FACFC,EADE;AAAA;AAAA;AAAA;AAAA;AAAA;AAEXJ,kCAAoB,IAApB;AAFW;AAAA,qBAGUI,IAHV;;AAAA;AAGLC,oBAHK;;AAIXL,kCAAoB,KAApB;;AAEAC,2BAAaK,OAAb,CAAqB;AAAA,uBAAeJ,OAAOK,WAAP,EAAoBC,cAApB,EAAf;AAAA,eAArB;;AANW,mBAQPH,MARO;AAAA;AAAA;AAAA;;AAAA,+CAQQA,MARR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAf;;AAYAH,OAAOO,YAAP,GAAsB,SAASA,YAAT,CAAsBC,GAAtB,EAA2B;AAC/CR,SAAOS,KAAP,CAAaC,eAAeF,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAAb;;AAEA;AACA,WAASE,cAAT,CAAwBF,GAAxB,EAA6BG,MAA7B,EAAqCC,KAArC,EAA4C;AAC1C,QAAMC,cAAc,EAApB;AACA,uCAA2BL,GAA3B,EAAgCJ,OAAhC,CAAwC,UAASU,GAAT,EAAc;AACpDD,kBAAYC,GAAZ,IAAmBN,IAAIM,GAAJ,CAAnB;AACD,KAFD;AAGA,WAAO,yBAAeD,WAAf,EAA4BF,MAA5B,EAAoCC,KAApC,CAAP;AACD;AACF,CAXD;;kBAaeZ,M;;;AAEfD,aAAaK,OAAb,CAAqB;AAAA,SAAeJ,OAAOK,WAAP,IAAsBU,uBAAuBV,WAAvB,CAArC;AAAA,CAArB;;AAEA,SAASU,sBAAT,CAAgCV,WAAhC,EAA6C;AAC3C,MAAMW,QAAQ,EAAd;AACA,MAAMC,KAAK,SAASC,eAAT,GAAkC;AAAA;;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AAC3C,QAAMC,kBAAkBJ,MAAMK,IAAN,CAAW;AAAA,aAAUC,wBAAUH,IAAV,MAAoB,KAA9B;AAAA,KAAX,CAAxB;AACA,QAAIrB,qBAAqBsB,eAAzB,EAA0C;AAC1C,yBAAQf,WAAR,kBAAwBc,IAAxB;AACD,GAJD;AAKAF,KAAGM,OAAH,GAAa;AAAA,WAAUP,MAAMQ,IAAN,CAAWF,MAAX,CAAV;AAAA,GAAb;AACAL,KAAGQ,UAAH,GAAgB;AAAA,WAAUT,MAAMU,MAAN,CAAaV,MAAMW,OAAN,CAAcL,MAAd,CAAb,EAAoC,CAApC,CAAV;AAAA,GAAhB;AACAL,KAAGX,cAAH,GAAoB;AAAA,WAAMU,MAAMY,MAAN,GAAe,CAArB;AAAA,GAApB;;AAEA,SAAOX,EAAP;AACD","file":"logger.js","sourcesContent":["let suppressAllOutput = false;\r\nconst logFunctions = [\r\n  'log',\r\n  'error',\r\n  'warn',\r\n  'info'\r\n];\r\nconst logger = {\r\n  async test(cb) {\r\n    suppressAllOutput = true;\r\n    const result = await cb();\r\n    suppressAllOutput = false;\r\n\r\n    logFunctions.forEach(logFunction => logger[logFunction].removeAllHooks());\r\n\r\n    if (result) return result;\r\n  },\r\n};\r\n\r\nlogger.logException = function logException(err) {\r\n  logger.error(stringifyError(err, null, 2));\r\n\r\n  /* stringifyError function from Bryan Larsen, http://stackoverflow.com/a/20405830/1090626 */\r\n  function stringifyError(err, filter, space) {\r\n    const plainObject = {};\r\n    Object.getOwnPropertyNames(err).forEach(function(key) {\r\n      plainObject[key] = err[key];\r\n    });\r\n    return JSON.stringify(plainObject, filter, space);\r\n  };\r\n};\r\n\r\nexport default logger;\r\n\r\nlogFunctions.forEach(logFunction => logger[logFunction] = generateOutputFunction(logFunction));\r\n\r\nfunction generateOutputFunction(logFunction) {\r\n  const hooks = [];\r\n  const fn = function callLogFunction(...args) {\r\n    const suppressMessage = hooks.some(hookFn => hookFn(...args) === false);\r\n    if (suppressAllOutput || suppressMessage) return;\r\n    console[logFunction](...args);\r\n  };\r\n  fn.addHook = hookFn => hooks.push(hookFn);\r\n  fn.removeHook = hookFn => hooks.splice(hooks.indexOf(hookFn), 1);\r\n  fn.removeAllHooks = () => hooks.length = 0;\r\n\r\n  return fn;\r\n}\r\n"]}